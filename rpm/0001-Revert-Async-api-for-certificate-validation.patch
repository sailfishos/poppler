From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Anton Thomasson <antonthomasson@gmail.com>
Date: Mon, 5 Aug 2024 17:50:35 +0200
Subject: [PATCH] Revert "Async api for certificate validation"

This reverts commit d40bb7e308c9e3299e50d3e2880229cd6272587e.
---
 glib/poppler-form-field.cc           |  7 +-
 poppler/CryptoSignBackend.h          |  6 +-
 poppler/Form.cc                      | 51 ++-------------
 poppler/Form.h                       | 23 +------
 poppler/GPGMECryptoSignBackend.cc    | 77 +++++-----------------
 poppler/GPGMECryptoSignBackend.h     |  6 +-
 poppler/NSSCryptoSignBackend.cc      | 63 +++++-------------
 poppler/NSSCryptoSignBackend.h       |  7 +-
 poppler/SignatureInfo.cc             | 10 +++
 poppler/SignatureInfo.h              |  3 +
 qt5/src/poppler-form.cc              | 98 ++++++++--------------------
 qt5/src/poppler-form.h               | 63 ++----------------
 qt5/tests/check_signature_basics.cpp |  6 +-
 qt5/tests/poppler-forms.cpp          |  7 +-
 qt6/src/poppler-form.cc              | 98 ++++++++--------------------
 qt6/src/poppler-form.h               | 63 ++----------------
 qt6/tests/check_signature_basics.cpp |  6 +-
 qt6/tests/poppler-forms.cpp          |  2 -
 utils/pdfsig.cc                      | 15 +----
 19 files changed, 134 insertions(+), 477 deletions(-)

diff --git a/glib/poppler-form-field.cc b/glib/poppler-form-field.cc
index bb67ebb2b83a890db74f65949416c5e78c4ebf04..2a0b726455e66276f7878244a1f30679ecd76aa7 100644
--- a/glib/poppler-form-field.cc
+++ b/glib/poppler-form-field.cc
@@ -449,9 +449,8 @@ static PopplerSignatureInfo *_poppler_form_field_signature_validate(PopplerFormF
 
     sig_field = static_cast<FormFieldSignature *>(field->widget->getField());
 
-    sig_info = sig_field->validateSignatureAsync(flags & POPPLER_SIGNATURE_VALIDATION_FLAG_VALIDATE_CERTIFICATE, force_revalidation, -1, flags & POPPLER_SIGNATURE_VALIDATION_FLAG_WITHOUT_OCSP_REVOCATION_CHECK,
-                                                 flags & POPPLER_SIGNATURE_VALIDATION_FLAG_USE_AIA_CERTIFICATE_FETCH, {});
-    CertificateValidationStatus certificateStatus = sig_field->validateSignatureResult();
+    sig_info = sig_field->validateSignature(flags & POPPLER_SIGNATURE_VALIDATION_FLAG_VALIDATE_CERTIFICATE, force_revalidation, -1, flags & POPPLER_SIGNATURE_VALIDATION_FLAG_WITHOUT_OCSP_REVOCATION_CHECK,
+                                            flags & POPPLER_SIGNATURE_VALIDATION_FLAG_USE_AIA_CERTIFICATE_FETCH);
 
     poppler_sig_info = g_new0(PopplerSignatureInfo, 1);
     switch (sig_info->getSignatureValStatus()) {
@@ -478,7 +477,7 @@ static PopplerSignatureInfo *_poppler_form_field_signature_validate(PopplerFormF
         break;
     }
 
-    switch (certificateStatus) {
+    switch (sig_info->getCertificateValStatus()) {
     case CERTIFICATE_TRUSTED:
         poppler_sig_info->cert_status = POPPLER_CERTIFICATE_TRUSTED;
         break;
diff --git a/poppler/CryptoSignBackend.h b/poppler/CryptoSignBackend.h
index 6c9f23250c18efeed3206672db90901b1c4833f7..8b2d6da7e6863e23bfbff5ca9c05b34e81f676f3 100644
--- a/poppler/CryptoSignBackend.h
+++ b/poppler/CryptoSignBackend.h
@@ -14,7 +14,6 @@
 #include <memory>
 #include <chrono>
 #include <optional>
-#include <functional>
 #include "HashAlgorithm.h"
 #include "CertificateInfo.h"
 #include "SignatureInfo.h"
@@ -39,10 +38,7 @@ public:
     virtual std::string getSignerName() const = 0;
     virtual std::string getSignerSubjectDN() const = 0;
     virtual HashAlgorithm getHashAlgorithm() const = 0;
-
-    // Blocking if doneCallback to validateCertificateAsync has not yet been called
-    virtual CertificateValidationStatus validateCertificateResult() = 0;
-    virtual void validateCertificateAsync(std::chrono::system_clock::time_point validation_time, bool ocspRevocationCheck, bool useAIACertFetch, const std::function<void()> &doneCallback) = 0;
+    virtual CertificateValidationStatus validateCertificate(std::chrono::system_clock::time_point validation_time, bool ocspRevocationCheck, bool useAIACertFetch) = 0;
     virtual std::unique_ptr<X509CertificateInfo> getCertificateInfo() const = 0;
     virtual ~VerificationInterface();
     VerificationInterface() = default;
diff --git a/poppler/Form.cc b/poppler/Form.cc
index 5dccd9732de79742e00f1cf4031ea6baed2407cb..973dea5bef02a20c429b2bef0d07c136df508228 100644
--- a/poppler/Form.cc
+++ b/poppler/Form.cc
@@ -581,14 +581,9 @@ const GooString *FormWidgetSignature::getSignature() const
     return static_cast<FormFieldSignature *>(field)->getSignature();
 }
 
-SignatureInfo *FormWidgetSignature::validateSignatureAsync(bool doVerifyCert, bool forceRevalidation, time_t validationTime, bool ocspRevocationCheck, bool enableAIA, const std::function<void()> &doneCallback)
+SignatureInfo *FormWidgetSignature::validateSignature(bool doVerifyCert, bool forceRevalidation, time_t validationTime, bool ocspRevocationCheck, bool enableAIA)
 {
-    return static_cast<FormFieldSignature *>(field)->validateSignatureAsync(doVerifyCert, forceRevalidation, validationTime, ocspRevocationCheck, enableAIA, doneCallback);
-}
-
-CertificateValidationStatus FormWidgetSignature::validateSignatureResult()
-{
-    return static_cast<FormFieldSignature *>(field)->validateSignatureResult();
+    return static_cast<FormFieldSignature *>(field)->validateSignature(doVerifyCert, forceRevalidation, validationTime, ocspRevocationCheck, enableAIA);
 }
 
 // update hash with the specified range of data from the file
@@ -2417,52 +2412,37 @@ void FormWidgetSignature::setSignatureType(FormSignatureType fst)
     static_cast<FormFieldSignature *>(field)->setSignatureType(fst);
 }
 
-SignatureInfo *FormFieldSignature::validateSignatureAsync(bool doVerifyCert, bool forceRevalidation, time_t validationTime, bool ocspRevocationCheck, bool enableAIA, const std::function<void()> &doneCallback)
+SignatureInfo *FormFieldSignature::validateSignature(bool doVerifyCert, bool forceRevalidation, time_t validationTime, bool ocspRevocationCheck, bool enableAIA)
 {
     auto backend = CryptoSign::Factory::createActive();
     if (!backend) {
-        if (doneCallback) {
-            doneCallback();
-        }
         return signature_info;
     }
 
     if (signature_info->getSignatureValStatus() != SIGNATURE_NOT_VERIFIED && !forceRevalidation) {
-        if (doneCallback) {
-            doneCallback();
-        }
         return signature_info;
     }
 
     if (signature == nullptr) {
         error(errSyntaxError, 0, "Invalid or missing Signature string");
-        if (doneCallback) {
-            doneCallback();
-        }
         return signature_info;
     }
 
     if (!byte_range.isArray()) {
         error(errSyntaxError, 0, "Invalid or missing ByteRange array");
-        if (doneCallback) {
-            doneCallback();
-        }
         return signature_info;
     }
 
     int arrayLen = byte_range.arrayGetLength();
     if (arrayLen < 2) {
         error(errSyntaxError, 0, "Too few elements in ByteRange array");
-        if (doneCallback) {
-            doneCallback();
-        }
         return signature_info;
     }
 
     const int signature_len = signature->getLength();
     std::vector<unsigned char> signatureData(signature_len);
     memcpy(signatureData.data(), signature->c_str(), signature_len);
-    signature_handler = backend->createVerificationHandler(std::move(signatureData));
+    auto signature_handler = backend->createVerificationHandler(std::move(signatureData));
 
     Goffset fileLength = doc->getBaseStream()->getLength();
     for (int i = 0; i < arrayLen / 2; i++) {
@@ -2471,9 +2451,6 @@ SignatureInfo *FormFieldSignature::validateSignatureAsync(bool doVerifyCert, boo
 
         if (!offsetObj.isIntOrInt64() || !lenObj.isIntOrInt64()) {
             error(errSyntaxError, 0, "Illegal values in ByteRange array");
-            if (doneCallback) {
-                doneCallback();
-            }
             return signature_info;
         }
 
@@ -2482,9 +2459,6 @@ SignatureInfo *FormFieldSignature::validateSignatureAsync(bool doVerifyCert, boo
 
         if (offset < 0 || offset >= fileLength || len < 0 || len > fileLength || offset + len > fileLength) {
             error(errSyntaxError, 0, "Illegal values in ByteRange array");
-            if (doneCallback) {
-                doneCallback();
-            }
             return signature_info;
         }
 
@@ -2494,9 +2468,6 @@ SignatureInfo *FormFieldSignature::validateSignatureAsync(bool doVerifyCert, boo
 
     if (!signature_info->isSubfilterSupported()) {
         error(errUnimplemented, 0, "Unable to validate this type of signature");
-        if (doneCallback) {
-            doneCallback();
-        }
         return signature_info;
     }
     const SignatureValidationStatus sig_val_state = signature_handler->validateSignature();
@@ -2513,25 +2484,15 @@ SignatureInfo *FormFieldSignature::validateSignatureAsync(bool doVerifyCert, boo
     signature_info->setCertificateInfo(signature_handler->getCertificateInfo());
 
     if (sig_val_state != SIGNATURE_VALID || !doVerifyCert) {
-        if (doneCallback) {
-            doneCallback();
-        }
         return signature_info;
     }
 
-    signature_handler->validateCertificateAsync(std::chrono::system_clock::from_time_t(validationTime), ocspRevocationCheck, enableAIA, doneCallback);
+    const CertificateValidationStatus cert_val_state = signature_handler->validateCertificate(std::chrono::system_clock::from_time_t(validationTime), ocspRevocationCheck, enableAIA);
+    signature_info->setCertificateValStatus(cert_val_state);
 
     return signature_info;
 }
 
-CertificateValidationStatus FormFieldSignature::validateSignatureResult()
-{
-    if (!signature_handler) {
-        return CERTIFICATE_GENERIC_ERROR;
-    }
-    return signature_handler->validateCertificateResult();
-}
-
 std::vector<Goffset> FormFieldSignature::getSignedRangeBounds() const
 {
     std::vector<Goffset> range_vec;
diff --git a/poppler/Form.h b/poppler/Form.h
index 51dae7420288443f09cdce4033301d9f3b0dace4..1f99447f4ef8b53da9621908b23c60a5fa46a898 100644
--- a/poppler/Form.h
+++ b/poppler/Form.h
@@ -39,14 +39,12 @@
 #include "CharTypes.h"
 #include "Object.h"
 #include "poppler_private_export.h"
-#include "SignatureInfo.h"
 
 #include <ctime>
 
 #include <optional>
 #include <set>
 #include <vector>
-#include <functional>
 
 class GooString;
 class Array;
@@ -57,6 +55,7 @@ class Annots;
 class LinkAction;
 class GfxResources;
 class PDFDoc;
+class SignatureInfo;
 class X509CertificateInfo;
 namespace CryptoSign {
 class VerificationInterface;
@@ -299,20 +298,7 @@ public:
     void setSignatureType(FormSignatureType fst);
 
     // Use -1 for now as validationTime
-    // ocspRevocation and aiafetch might happen async in the Background
-    // doneCallback will be invoked once there is a result
-    // Note: Validation callback will likely happen from an auxillary
-    // thread and it is the caller of this method who is responsible
-    // for moving back to the main thread
-    // For synchronous code, don't provide validation callback
-    // and just call validateSignatureResult afterwards
-    // The returned SignatureInfo from this method does
-    // not have validated the certificate.
-    SignatureInfo *validateSignatureAsync(bool doVerifyCert, bool forceRevalidation, time_t validationTime, bool ocspRevocationCheck, bool enableAIA, const std::function<void()> &doneCallback);
-
-    /// Waits, if needed, on validation callback and
-    /// returns a signatureinfo with validated certificates
-    CertificateValidationStatus validateSignatureResult();
+    SignatureInfo *validateSignature(bool doVerifyCert, bool forceRevalidation, time_t validationTime, bool ocspRevocationCheck, bool enableAIA);
 
     // returns a list with the boundaries of the signed ranges
     // the elements of the list are of type Goffset
@@ -624,9 +610,7 @@ public:
     FormFieldSignature(PDFDoc *docA, Object &&dict, const Ref ref, FormField *parent, std::set<int> *usedParents);
 
     // Use -1 for now as validationTime
-    SignatureInfo *validateSignatureAsync(bool doVerifyCert, bool forceRevalidation, time_t validationTime, bool ocspRevocationCheck, bool enableAIA, const std::function<void()> &doneCallback);
-
-    CertificateValidationStatus validateSignatureResult();
+    SignatureInfo *validateSignature(bool doVerifyCert, bool forceRevalidation, time_t validationTime, bool ocspRevocationCheck, bool enableAIA);
 
     // returns a list with the boundaries of the signed ranges
     // the elements of the list are of type Goffset
@@ -674,7 +658,6 @@ private:
     double customAppearanceLeftFontSize = 20;
     Ref imageResource = Ref::INVALID();
     std::unique_ptr<X509CertificateInfo> certificate_info;
-    std::unique_ptr<CryptoSign::VerificationInterface> signature_handler;
 
     void print(int indent) override;
 };
diff --git a/poppler/GPGMECryptoSignBackend.cc b/poppler/GPGMECryptoSignBackend.cc
index b862650ac0d337e5806f8d2c4353332ae7b293df..6d652d311a3433aa07bb4d3f1434d72e1430c09d 100644
--- a/poppler/GPGMECryptoSignBackend.cc
+++ b/poppler/GPGMECryptoSignBackend.cc
@@ -348,77 +348,32 @@ std::chrono::system_clock::time_point GpgSignatureVerification::getSigningTime()
     return std::chrono::system_clock::from_time_t(signature->creationTime());
 }
 
-void GpgSignatureVerification::validateCertificateAsync(std::chrono::system_clock::time_point validation_time, bool ocspRevocationCheck, bool useAIACertFetch, const std::function<void()> &doneFunction)
+CertificateValidationStatus GpgSignatureVerification::validateCertificate(std::chrono::system_clock::time_point validation_time, bool ocspRevocationCheck, bool useAIACertFetch)
 {
-    cachedValidationStatus.reset();
     if (!gpgResult) {
-        validationStatus = std::async([doneFunction]() {
-            if (doneFunction) {
-                doneFunction();
-            }
-            return CERTIFICATE_NOT_VERIFIED;
-        });
-        return;
+        return CERTIFICATE_NOT_VERIFIED;
     }
     if (gpgResult->error()) {
-        validationStatus = std::async([doneFunction]() {
-            if (doneFunction) {
-                doneFunction();
-            }
-            return CERTIFICATE_GENERIC_ERROR;
-        });
-        return;
+        return CERTIFICATE_GENERIC_ERROR;
     }
     const auto signature = getSignature(gpgResult.value(), 0);
     if (!signature) {
-        validationStatus = std::async([doneFunction]() {
-            if (doneFunction) {
-                doneFunction();
-            }
-            return CERTIFICATE_GENERIC_ERROR;
-        });
-        return;
-    }
-    std::string keyFP = fromCharPtr(signature->key().primaryFingerprint());
-    validationStatus = std::async([keyFP = std::move(keyFP), doneFunction, ocspRevocationCheck, useAIACertFetch]() {
-        auto context = GpgME::Context::create(GpgME::CMS);
-        context->setOffline((!ocspRevocationCheck) || useAIACertFetch);
-        context->setKeyListMode(GpgME::KeyListMode::Local | GpgME::KeyListMode::Validate);
-        GpgME::Error e;
-        const auto key = context->key(keyFP.c_str(), e, false);
-        if (doneFunction) {
-            doneFunction();
-        }
-        if (e.isCanceled()) {
-            return CERTIFICATE_NOT_VERIFIED;
-        }
-        if (e) {
-            return CERTIFICATE_GENERIC_ERROR;
-        }
-        if (key.isExpired()) {
-            return CERTIFICATE_EXPIRED;
-        }
-        if (key.isRevoked()) {
-            return CERTIFICATE_REVOKED;
-        }
-        if (key.isBad()) {
-            return CERTIFICATE_NOT_VERIFIED;
-        }
-        return CERTIFICATE_TRUSTED;
-    });
-}
-
-CertificateValidationStatus GpgSignatureVerification::validateCertificateResult()
-{
-    if (cachedValidationStatus) {
-        return cachedValidationStatus.value();
+        return CERTIFICATE_GENERIC_ERROR;
+    }
+    const auto offline = gpgContext->offline();
+    gpgContext->setOffline((!ocspRevocationCheck) || useAIACertFetch);
+    const auto key = signature->key(true, true);
+    gpgContext->setOffline(offline);
+    if (key.isExpired()) {
+        return CERTIFICATE_EXPIRED;
+    }
+    if (key.isRevoked()) {
+        return CERTIFICATE_REVOKED;
     }
-    if (!validationStatus.valid()) {
+    if (key.isBad()) {
         return CERTIFICATE_NOT_VERIFIED;
     }
-    validationStatus.wait();
-    cachedValidationStatus = validationStatus.get();
-    return cachedValidationStatus.value();
+    return CERTIFICATE_TRUSTED;
 }
 
 SignatureValidationStatus GpgSignatureVerification::validateSignature()
diff --git a/poppler/GPGMECryptoSignBackend.h b/poppler/GPGMECryptoSignBackend.h
index f7e81170dfadce10525f3d6cb87774664186c8f8..9e767c90127d2ca7f92a6475252115e045787f79 100644
--- a/poppler/GPGMECryptoSignBackend.h
+++ b/poppler/GPGMECryptoSignBackend.h
@@ -12,7 +12,6 @@
 #include <gpgme++/data.h>
 #include <gpgme++/context.h>
 #include <optional>
-#include <future>
 
 class GpgSignatureBackend : public CryptoSign::Backend
 {
@@ -48,8 +47,7 @@ public:
     std::string getSignerName() const final;
     std::string getSignerSubjectDN() const final;
     HashAlgorithm getHashAlgorithm() const final;
-    CertificateValidationStatus validateCertificateResult() final;
-    void validateCertificateAsync(std::chrono::system_clock::time_point validation_time, bool ocspRevocationCheck, bool useAIACertFetch, const std::function<void()> &doneCallback) final;
+    CertificateValidationStatus validateCertificate(std::chrono::system_clock::time_point validation_time, bool ocspRevocationCheck, bool useAIACertFetch) final;
     std::unique_ptr<X509CertificateInfo> getCertificateInfo() const final;
 
 private:
@@ -57,6 +55,4 @@ private:
     GpgME::Data signatureData;
     GpgME::Data signedData;
     std::optional<GpgME::VerificationResult> gpgResult;
-    std::future<CertificateValidationStatus> validationStatus;
-    std::optional<CertificateValidationStatus> cachedValidationStatus;
 };
diff --git a/poppler/NSSCryptoSignBackend.cc b/poppler/NSSCryptoSignBackend.cc
index 491ef22969d7c198fb1e808cf83ab7f46e43025e..416248ab3ff5f0dad5cc520a66cf80f9cf7750d9 100644
--- a/poppler/NSSCryptoSignBackend.cc
+++ b/poppler/NSSCryptoSignBackend.cc
@@ -966,19 +966,12 @@ SignatureValidationStatus NSSSignatureVerification::validateSignature()
     }
 }
 
-void NSSSignatureVerification::validateCertificateAsync(std::chrono::system_clock::time_point validation_time, bool ocspRevocationCheck, bool useAIACertFetch, const std::function<void()> &doneCallback)
+CertificateValidationStatus NSSSignatureVerification::validateCertificate(std::chrono::system_clock::time_point validation_time, bool ocspRevocationCheck, bool useAIACertFetch)
 {
-    cachedValidationStatus.reset();
     CERTCertificate *cert;
 
     if (!CMSSignerInfo) {
-        validationStatus = std::async([doneCallback]() {
-            if (doneCallback) {
-                doneCallback();
-            }
-            return CERTIFICATE_GENERIC_ERROR;
-        });
-        return;
+        return CERTIFICATE_GENERIC_ERROR;
     }
 
     if ((cert = NSS_CMSSignerInfo_GetSigningCertificate(CMSSignerInfo, CERT_GetDefaultCertDB())) == nullptr) {
@@ -1008,49 +1001,25 @@ void NSSSignatureVerification::validateCertificateAsync(std::chrono::system_cloc
 
     CERT_PKIXVerifyCert(cert, certificateUsageEmailSigner, inParams, nullptr, CMSSignerInfo->cmsg->pwfn_arg);
 
-    // Here we are just faking the asynchronousness. It should
-    // somehow be the call to CERT_PXIXVerifyCert that would
-    // be put in the thread, but I'm not sure about all of the
-    // thread safety of nss.
-
-    validationStatus = std::async([result = PORT_GetError(), doneCallback]() {
-        if (doneCallback) {
-            doneCallback();
-        }
-
-        switch (result) {
-        // 0 not defined in SECErrorCodes, it means success for this purpose.
-        case 0:
-            return CERTIFICATE_TRUSTED;
-
-        case SEC_ERROR_UNKNOWN_ISSUER:
-            return CERTIFICATE_UNKNOWN_ISSUER;
+    switch (PORT_GetError()) {
+    // 0 not defined in SECErrorCodes, it means success for this purpose.
+    case 0:
+        return CERTIFICATE_TRUSTED;
 
-        case SEC_ERROR_UNTRUSTED_ISSUER:
-            return CERTIFICATE_UNTRUSTED_ISSUER;
+    case SEC_ERROR_UNKNOWN_ISSUER:
+        return CERTIFICATE_UNKNOWN_ISSUER;
 
-        case SEC_ERROR_REVOKED_CERTIFICATE:
-            return CERTIFICATE_REVOKED;
+    case SEC_ERROR_UNTRUSTED_ISSUER:
+        return CERTIFICATE_UNTRUSTED_ISSUER;
 
-        case SEC_ERROR_EXPIRED_CERTIFICATE:
-            return CERTIFICATE_EXPIRED;
-        }
-
-        return CERTIFICATE_GENERIC_ERROR;
-    });
-}
+    case SEC_ERROR_REVOKED_CERTIFICATE:
+        return CERTIFICATE_REVOKED;
 
-CertificateValidationStatus NSSSignatureVerification::validateCertificateResult()
-{
-    if (cachedValidationStatus) {
-        return cachedValidationStatus.value();
-    }
-    if (!validationStatus.valid()) {
-        return CERTIFICATE_NOT_VERIFIED;
+    case SEC_ERROR_EXPIRED_CERTIFICATE:
+        return CERTIFICATE_EXPIRED;
     }
-    validationStatus.wait();
-    cachedValidationStatus = validationStatus.get();
-    return cachedValidationStatus.value();
+
+    return CERTIFICATE_GENERIC_ERROR;
 }
 
 std::optional<GooString> NSSSignatureCreation::signDetached(const std::string &password)
diff --git a/poppler/NSSCryptoSignBackend.h b/poppler/NSSCryptoSignBackend.h
index 03501e35a0e201e851c4352124bc2039ad40ac84..96ae6533942942ddc945ef22055fd5b7dd88cb44 100644
--- a/poppler/NSSCryptoSignBackend.h
+++ b/poppler/NSSCryptoSignBackend.h
@@ -30,7 +30,6 @@
 #include <vector>
 #include <functional>
 #include <memory>
-#include <future>
 
 /* NSPR Headers */
 #include <nspr.h>
@@ -79,9 +78,7 @@ public:
     std::string getSignerName() const final;
     std::string getSignerSubjectDN() const final;
     // Use -1 as validation_time for now
-
-    CertificateValidationStatus validateCertificateResult() final;
-    void validateCertificateAsync(std::chrono::system_clock::time_point validation_time, bool ocspRevocationCheck, bool useAIACertFetch, const std::function<void()> &doneCallback) final;
+    CertificateValidationStatus validateCertificate(std::chrono::system_clock::time_point validation_time, bool ocspRevocationCheck, bool useAIACertFetch) final;
     std::unique_ptr<X509CertificateInfo> getCertificateInfo() const final;
     void addData(unsigned char *data_block, int data_len) final;
     HashAlgorithm getHashAlgorithm() const final;
@@ -96,8 +93,6 @@ private:
     NSSCMSSignerInfo *CMSSignerInfo;
     SECItem CMSitem;
     std::unique_ptr<HashContext> hashContext;
-    std::future<CertificateValidationStatus> validationStatus;
-    std::optional<CertificateValidationStatus> cachedValidationStatus;
 };
 
 class NSSSignatureCreation final : public CryptoSign::SigningInterface
diff --git a/poppler/SignatureInfo.cc b/poppler/SignatureInfo.cc
index 14e9c8802f49beba4860193d8a2cdfb65af35b00..2fb30033865376dc65f0e2aa79d47d55817373a7 100644
--- a/poppler/SignatureInfo.cc
+++ b/poppler/SignatureInfo.cc
@@ -37,6 +37,11 @@ SignatureValidationStatus SignatureInfo::getSignatureValStatus() const
     return sig_status;
 }
 
+CertificateValidationStatus SignatureInfo::getCertificateValStatus() const
+{
+    return cert_status;
+}
+
 std::string SignatureInfo::getSignerName() const
 {
     return signer_name;
@@ -79,6 +84,11 @@ void SignatureInfo::setSignatureValStatus(enum SignatureValidationStatus sig_val
     sig_status = sig_val_status;
 }
 
+void SignatureInfo::setCertificateValStatus(enum CertificateValidationStatus cert_val_status)
+{
+    cert_status = cert_val_status;
+}
+
 void SignatureInfo::setSignerName(const std::string &signerName)
 {
     signer_name = signerName;
diff --git a/poppler/SignatureInfo.h b/poppler/SignatureInfo.h
index 8e5ad37f85ed2de5cb01c9137f9e86ff947132a8..dbdbeb3319548197d14066ccfc368c5ad32fa591 100644
--- a/poppler/SignatureInfo.h
+++ b/poppler/SignatureInfo.h
@@ -62,6 +62,7 @@ public:
 
     /* GETTERS */
     SignatureValidationStatus getSignatureValStatus() const;
+    CertificateValidationStatus getCertificateValStatus() const;
     std::string getSignerName() const;
     std::string getSubjectDN() const;
     const GooString &getLocation() const;
@@ -73,6 +74,7 @@ public:
 
     /* SETTERS */
     void setSignatureValStatus(enum SignatureValidationStatus);
+    void setCertificateValStatus(enum CertificateValidationStatus);
     void setSignerName(const std::string &);
     void setSubjectDN(const std::string &);
     void setLocation(const GooString *);
@@ -84,6 +86,7 @@ public:
 
 private:
     SignatureValidationStatus sig_status = SIGNATURE_NOT_VERIFIED;
+    CertificateValidationStatus cert_status = CERTIFICATE_NOT_VERIFIED;
     std::unique_ptr<X509CertificateInfo> cert_info;
     std::string signer_name;
     std::string subject_dn;
diff --git a/qt5/src/poppler-form.cc b/qt5/src/poppler-form.cc
index 999b579fec37840220c39ff8fc20938e85f480c7..a810989521d3bf533cdb9baf4f1f083fc21792c0 100644
--- a/qt5/src/poppler-form.cc
+++ b/qt5/src/poppler-form.cc
@@ -984,9 +984,7 @@ FormFieldSignature::SignatureType FormFieldSignature::signatureType() const
 
 SignatureValidationInfo FormFieldSignature::validate(ValidateOptions opt) const
 {
-    auto tempResult = validateAsync(opt);
-    tempResult.first.d_ptr->certificate_status = validateResult();
-    return tempResult.first;
+    return validate(opt, QDateTime());
 }
 
 static CertificateInfo::KeyLocation fromPopplerCore(KeyLocation location)
@@ -1048,29 +1046,12 @@ static CertificateInfoPrivate *createCertificateInfoPrivate(const X509Certificat
     return certPriv;
 }
 
-static SignatureValidationInfo::CertificateStatus fromInternal(CertificateValidationStatus status)
+SignatureValidationInfo FormFieldSignature::validate(int opt, const QDateTime &validationTime) const
 {
-    switch (status) {
-    case CERTIFICATE_TRUSTED:
-        return SignatureValidationInfo::CertificateTrusted;
-    case CERTIFICATE_UNTRUSTED_ISSUER:
-        return SignatureValidationInfo::CertificateUntrustedIssuer;
-    case CERTIFICATE_UNKNOWN_ISSUER:
-        return SignatureValidationInfo::CertificateUnknownIssuer;
-    case CERTIFICATE_REVOKED:
-        return SignatureValidationInfo::CertificateRevoked;
-    case CERTIFICATE_EXPIRED:
-        return SignatureValidationInfo::CertificateExpired;
-    default:
-    case CERTIFICATE_GENERIC_ERROR:
-        return SignatureValidationInfo::CertificateGenericError;
-    case CERTIFICATE_NOT_VERIFIED:
-        return SignatureValidationInfo::CertificateNotVerified;
-    }
-}
+    FormWidgetSignature *fws = static_cast<FormWidgetSignature *>(m_formData->fm);
+    const time_t validationTimeT = validationTime.isValid() ? validationTime.toSecsSinceEpoch() : -1;
+    SignatureInfo *si = fws->validateSignature(opt & ValidateVerifyCertificate, opt & ValidateForceRevalidation, validationTimeT, !(opt & ValidateWithoutOCSPRevocationCheck), opt & ValidateUseAIACertFetch);
 
-static SignatureValidationInfo fromInternal(SignatureInfo *si, FormWidgetSignature *fws)
-{
     // get certificate info
     const X509CertificateInfo *ci = si->getCertificateInfo();
     CertificateInfoPrivate *certPriv = createCertificateInfoPrivate(ci);
@@ -1100,7 +1081,30 @@ static SignatureValidationInfo fromInternal(SignatureInfo *si, FormWidgetSignatu
         priv->signature_status = SignatureValidationInfo::SignatureNotVerified;
         break;
     }
-    priv->certificate_status = SignatureValidationInfo::CertificateVerificationInProgress;
+    switch (si->getCertificateValStatus()) {
+    case CERTIFICATE_TRUSTED:
+        priv->certificate_status = SignatureValidationInfo::CertificateTrusted;
+        break;
+    case CERTIFICATE_UNTRUSTED_ISSUER:
+        priv->certificate_status = SignatureValidationInfo::CertificateUntrustedIssuer;
+        break;
+    case CERTIFICATE_UNKNOWN_ISSUER:
+        priv->certificate_status = SignatureValidationInfo::CertificateUnknownIssuer;
+        break;
+    case CERTIFICATE_REVOKED:
+        priv->certificate_status = SignatureValidationInfo::CertificateRevoked;
+        break;
+    case CERTIFICATE_EXPIRED:
+        priv->certificate_status = SignatureValidationInfo::CertificateExpired;
+        break;
+    default:
+    case CERTIFICATE_GENERIC_ERROR:
+        priv->certificate_status = SignatureValidationInfo::CertificateGenericError;
+        break;
+    case CERTIFICATE_NOT_VERIFIED:
+        priv->certificate_status = SignatureValidationInfo::CertificateNotVerified;
+        break;
+    }
     priv->signer_name = QString::fromStdString(si->getSignerName());
     priv->signer_subject_dn = QString::fromStdString(si->getSubjectDN());
     priv->hash_algorithm = si->getHashAlgorithm();
@@ -1122,50 +1126,6 @@ static SignatureValidationInfo fromInternal(SignatureInfo *si, FormWidgetSignatu
     return SignatureValidationInfo(priv);
 }
 
-SignatureValidationInfo FormFieldSignature::validate(int opt, const QDateTime &validationTime) const
-{
-    auto tempResult = validateAsync(static_cast<ValidateOptions>(opt), validationTime);
-    tempResult.first.d_ptr->certificate_status = validateResult();
-    return tempResult.first;
-}
-
-class AsyncObjectPrivate
-{ /*Currently unused. Created for abi future proofing*/
-};
-
-AsyncObject::AsyncObject() : QObject(nullptr), d {} { }
-
-AsyncObject::~AsyncObject() = default;
-
-std::pair<SignatureValidationInfo, std::shared_ptr<Poppler::AsyncObject>> FormFieldSignature::validateAsync(ValidateOptions opt, const QDateTime &validationTime) const
-{
-    auto object = std::make_shared<AsyncObject>();
-    FormWidgetSignature *fws = static_cast<FormWidgetSignature *>(m_formData->fm);
-    const time_t validationTimeT = validationTime.isValid() ? validationTime.toSecsSinceEpoch() : -1;
-    SignatureInfo *si = fws->validateSignatureAsync(opt & ValidateVerifyCertificate, opt & ValidateForceRevalidation, validationTimeT, !(opt & ValidateWithoutOCSPRevocationCheck), opt & ValidateUseAIACertFetch,
-                                                    [obj = std::weak_ptr<AsyncObject>(object)]() {
-                                                        if (auto l = obj.lock()) {
-                                                            // We need to roundtrip over the eventloop
-                                                            // to ensure callers have a chance of connecting to AsyncObject::done
-                                                            QMetaObject::invokeMethod(
-                                                                    l.get(),
-                                                                    [innerObj = std::weak_ptr<AsyncObject>(l)]() {
-                                                                        if (auto innerLocked = innerObj.lock()) {
-                                                                            emit innerLocked->done();
-                                                                        }
-                                                                    },
-                                                                    Qt::QueuedConnection);
-                                                        }
-                                                    });
-
-    return { fromInternal(si, fws), object };
-}
-
-SignatureValidationInfo::CertificateStatus FormFieldSignature::validateResult() const
-{
-    return fromInternal(static_cast<FormWidgetSignature *>(m_formData->fm)->validateSignatureResult());
-}
-
 FormFieldSignature::SigningResult FormFieldSignature::sign(const QString &outputFileName, const PDFConverter::NewSignatureData &data) const
 {
     FormWidgetSignature *fws = static_cast<FormWidgetSignature *>(m_formData->fm);
diff --git a/qt5/src/poppler-form.h b/qt5/src/poppler-form.h
index 127bcd2048bee590595b88cef769c9fb165a0261..2ca424b63c6d5a84d406c7e6ad7cda28d335c883 100644
--- a/qt5/src/poppler-form.h
+++ b/qt5/src/poppler-form.h
@@ -696,8 +696,7 @@ public:
         CertificateRevoked, ///< The certificate was revoked by the issuing certificate authority.
         CertificateExpired, ///< The signing time is outside the validity bounds of this certificate.
         CertificateGenericError, ///< The certificate could not be verified.
-        CertificateNotVerified, ///< The certificate is not yet verified.
-        CertificateVerificationInProgress ///< The certificate is not yet verified but is in progress in the background. See \ref validateAsync \since 24.05
+        CertificateNotVerified ///< The certificate is not yet verified.
     };
 
     /**
@@ -795,30 +794,8 @@ public:
 
 private:
     Q_DECLARE_PRIVATE(SignatureValidationInfo)
-    friend class FormFieldSignature;
-    QSharedPointer<SignatureValidationInfoPrivate> d_ptr;
-};
 
-/**
- * Object help waiting for some async event
- *
- * \since 24.05
- */
-class AsyncObjectPrivate;
-class POPPLER_QT5_EXPORT AsyncObject : public QObject // clazy:exclude=ctor-missing-parent-argument
-{
-    Q_OBJECT
-public:
-    /* Constructor. On purpose not having a QObject parameter
-       It will be returned by shared_ptr or unique_ptr
-    */
-    AsyncObject();
-    ~AsyncObject() override;
-Q_SIGNALS:
-    void done();
-public Q_SLOTS:
-private:
-    std::unique_ptr<AsyncObjectPrivate> d;
+    QSharedPointer<SignatureValidationInfoPrivate> d_ptr;
 };
 
 /**
@@ -876,10 +853,8 @@ public:
       requiring network access, AIAFetch and OCSP,
       can be toggled individually. In case of the GPG backend, if either
       OCSP is used or AIAFetch is used, the other one is also used.
-
-      \deprecated Please rewrite to the async version, that allows the network traffic part of fetching to happen in the background
      */
-    POPPLER_QT5_DEPRECATED SignatureValidationInfo validate(ValidateOptions opt) const;
+    SignatureValidationInfo validate(ValidateOptions opt) const;
 
     /**
       Validate the signature with @p validationTime as validation time.
@@ -893,38 +868,8 @@ public:
       requiring network access, AIAFetch and OCSP,
       can be toggled individually. In case of the GPG backend, if either
       OCSP is used or AIAFetch is used, the other one is also used.
-
-      \deprecated Please rewrite to the async version, that allows the network traffic part of fetching to happen in the background
-     */
-    POPPLER_QT5_DEPRECATED SignatureValidationInfo validate(int opt, const QDateTime &validationTime) const;
-
-    /**
-      Validate the signature with @p validationTime as validation time.
-
-      Reset signature validatation info of scoped instance.
-
-      \since 24.05
-
-      \note depending on the backend, some options are only
-      partially respected. In case of the NSS backend, the two options
-      requiring network access, AIAFetch and OCSP,
-      can be toggled individually. In case of the GPG backend, if either
-      OCSP is used or AIAFetch is used, the other one is also used.
-
-      \note certificate validation will have started when this function return. See \ref validateResult on how to get certifcate validation
-      \note connections to \ref AsyncObject must happen by the caller
-      before returning control to the event loop, else signals is not guaranteed to be delivered
-    */
-    std::pair<SignatureValidationInfo, std::shared_ptr<AsyncObject>> validateAsync(ValidateOptions opt, const QDateTime &validationTime = {}) const;
-
-    /**
-     * \return the updated signature validation info from validateAsync
-     * \note that this function will block if the result is not yet ready.
-     * Wait for the \ref AsyncObject::done signal to avoid this function blocking on an inconvenient time
-     *
-     * \since 24.05
      */
-    SignatureValidationInfo::CertificateStatus validateResult() const;
+    SignatureValidationInfo validate(int opt, const QDateTime &validationTime) const;
 
     /**
      * \since 22.02
diff --git a/qt5/tests/check_signature_basics.cpp b/qt5/tests/check_signature_basics.cpp
index 2612c0bd50e757472d0efd9cef172f394bb3d9a5..d5e474582c551b9f006d0cfa37e794e8a8700f1a 100644
--- a/qt5/tests/check_signature_basics.cpp
+++ b/qt5/tests/check_signature_basics.cpp
@@ -112,8 +112,7 @@ void TestSignatureBasics::testSignerInfo()
     auto signatureFields = doc->getSignatureFields();
     QCOMPARE(signatureFields[0]->getCreateWidget()->getField()->getFullyQualifiedName()->toStr(), std::string { "P2.AnA_Signature0_B_" });
     QCOMPARE(signatureFields[0]->getSignatureType(), ETSI_CAdES_detached);
-    auto siginfo0 = signatureFields[0]->validateSignatureAsync(false, false, -1 /* now */, false, false, {});
-    signatureFields[0]->validateSignatureResult();
+    auto siginfo0 = signatureFields[0]->validateSignature(false, false, -1 /* now */, false, false);
 #ifdef ENABLE_SIGNATURES
     QCOMPARE(siginfo0->getSignerName(), std::string { "Koch, Werner" });
     QCOMPARE(siginfo0->getHashAlgorithm(), HashAlgorithm::Sha256);
@@ -126,8 +125,7 @@ void TestSignatureBasics::testSignerInfo()
 
     QCOMPARE(signatureFields[1]->getCreateWidget()->getField()->getFullyQualifiedName()->toStr(), std::string { "P2.AnA_Signature1_B_" });
     QCOMPARE(signatureFields[1]->getSignatureType(), ETSI_CAdES_detached);
-    auto siginfo1 = signatureFields[1]->validateSignatureAsync(false, false, -1 /* now */, false, false, {});
-    signatureFields[1]->validateSignatureResult();
+    auto siginfo1 = signatureFields[1]->validateSignature(false, false, -1 /* now */, false, false);
 #ifdef ENABLE_SIGNATURES
     QCOMPARE(siginfo1->getSignerName(), std::string { "Koch, Werner" });
     QCOMPARE(siginfo1->getHashAlgorithm(), HashAlgorithm::Sha256);
diff --git a/qt5/tests/poppler-forms.cpp b/qt5/tests/poppler-forms.cpp
index 8d927e84f47c0114066cad02dfaba5045719f934..5950969a666ca3e1cdd73db6cd21353bf3f0f016 100644
--- a/qt5/tests/poppler-forms.cpp
+++ b/qt5/tests/poppler-forms.cpp
@@ -123,8 +123,6 @@ static std::ostream &operator<<(std::ostream &out, Poppler::SignatureValidationI
     case Poppler::SignatureValidationInfo::CertificateNotVerified:
         out << "NotVerifiedYet";
         break;
-    case Poppler::SignatureValidationInfo::CertificateVerificationInProgress:
-        out << "InProgress";
     }
     return out;
 }
@@ -254,10 +252,9 @@ int main(int argc, char **argv)
 
                 case Poppler::FormField::FormSignature: {
                     const Poppler::FormFieldSignature *signatureForm = static_cast<const Poppler::FormFieldSignature *>(form);
-                    const Poppler::SignatureValidationInfo svi = signatureForm->validateAsync(Poppler::FormFieldSignature::ValidateVerifyCertificate).first;
-                    const Poppler::SignatureValidationInfo::CertificateStatus certStatus = signatureForm->validateResult();
+                    const Poppler::SignatureValidationInfo svi = signatureForm->validate(Poppler::FormFieldSignature::ValidateVerifyCertificate);
                     std::cout << "\t\t\tSignatureStatus: " << svi.signatureStatus() << std::endl;
-                    std::cout << "\t\t\tCertificateStatus: " << certStatus << std::endl;
+                    std::cout << "\t\t\tCertificateStatus: " << svi.certificateStatus() << std::endl;
                     if (svi.signerName().isEmpty() == false) {
                         std::cout << "\t\t\tSignerName: " << svi.signerName() << std::endl;
                     } else {
diff --git a/qt6/src/poppler-form.cc b/qt6/src/poppler-form.cc
index 1caa513c336fdd0af0e5e3c12beb69c7ca05abe3..4adfead7db37aa739e106ad47c6d82c36080666a 100644
--- a/qt6/src/poppler-form.cc
+++ b/qt6/src/poppler-form.cc
@@ -984,9 +984,7 @@ FormFieldSignature::SignatureType FormFieldSignature::signatureType() const
 
 SignatureValidationInfo FormFieldSignature::validate(ValidateOptions opt) const
 {
-    auto tempResult = validateAsync(opt);
-    tempResult.first.d_ptr->certificate_status = validateResult();
-    return tempResult.first;
+    return validate(opt, QDateTime());
 }
 
 static CertificateInfo::KeyLocation fromPopplerCore(KeyLocation location)
@@ -1048,29 +1046,12 @@ static CertificateInfoPrivate *createCertificateInfoPrivate(const X509Certificat
     return certPriv;
 }
 
-static SignatureValidationInfo::CertificateStatus fromInternal(CertificateValidationStatus status)
+SignatureValidationInfo FormFieldSignature::validate(int opt, const QDateTime &validationTime) const
 {
-    switch (status) {
-    case CERTIFICATE_TRUSTED:
-        return SignatureValidationInfo::CertificateTrusted;
-    case CERTIFICATE_UNTRUSTED_ISSUER:
-        return SignatureValidationInfo::CertificateUntrustedIssuer;
-    case CERTIFICATE_UNKNOWN_ISSUER:
-        return SignatureValidationInfo::CertificateUnknownIssuer;
-    case CERTIFICATE_REVOKED:
-        return SignatureValidationInfo::CertificateRevoked;
-    case CERTIFICATE_EXPIRED:
-        return SignatureValidationInfo::CertificateExpired;
-    default:
-    case CERTIFICATE_GENERIC_ERROR:
-        return SignatureValidationInfo::CertificateGenericError;
-    case CERTIFICATE_NOT_VERIFIED:
-        return SignatureValidationInfo::CertificateNotVerified;
-    }
-}
+    FormWidgetSignature *fws = static_cast<FormWidgetSignature *>(m_formData->fm);
+    const time_t validationTimeT = validationTime.isValid() ? validationTime.toSecsSinceEpoch() : -1;
+    SignatureInfo *si = fws->validateSignature(opt & ValidateVerifyCertificate, opt & ValidateForceRevalidation, validationTimeT, !(opt & ValidateWithoutOCSPRevocationCheck), opt & ValidateUseAIACertFetch);
 
-static SignatureValidationInfo fromInternal(SignatureInfo *si, FormWidgetSignature *fws)
-{
     // get certificate info
     const X509CertificateInfo *ci = si->getCertificateInfo();
     CertificateInfoPrivate *certPriv = createCertificateInfoPrivate(ci);
@@ -1100,7 +1081,30 @@ static SignatureValidationInfo fromInternal(SignatureInfo *si, FormWidgetSignatu
         priv->signature_status = SignatureValidationInfo::SignatureNotVerified;
         break;
     }
-    priv->certificate_status = SignatureValidationInfo::CertificateVerificationInProgress;
+    switch (si->getCertificateValStatus()) {
+    case CERTIFICATE_TRUSTED:
+        priv->certificate_status = SignatureValidationInfo::CertificateTrusted;
+        break;
+    case CERTIFICATE_UNTRUSTED_ISSUER:
+        priv->certificate_status = SignatureValidationInfo::CertificateUntrustedIssuer;
+        break;
+    case CERTIFICATE_UNKNOWN_ISSUER:
+        priv->certificate_status = SignatureValidationInfo::CertificateUnknownIssuer;
+        break;
+    case CERTIFICATE_REVOKED:
+        priv->certificate_status = SignatureValidationInfo::CertificateRevoked;
+        break;
+    case CERTIFICATE_EXPIRED:
+        priv->certificate_status = SignatureValidationInfo::CertificateExpired;
+        break;
+    default:
+    case CERTIFICATE_GENERIC_ERROR:
+        priv->certificate_status = SignatureValidationInfo::CertificateGenericError;
+        break;
+    case CERTIFICATE_NOT_VERIFIED:
+        priv->certificate_status = SignatureValidationInfo::CertificateNotVerified;
+        break;
+    }
     priv->signer_name = QString::fromStdString(si->getSignerName());
     priv->signer_subject_dn = QString::fromStdString(si->getSubjectDN());
     priv->hash_algorithm = si->getHashAlgorithm();
@@ -1122,50 +1126,6 @@ static SignatureValidationInfo fromInternal(SignatureInfo *si, FormWidgetSignatu
     return SignatureValidationInfo(priv);
 }
 
-SignatureValidationInfo FormFieldSignature::validate(int opt, const QDateTime &validationTime) const
-{
-    auto tempResult = validateAsync(static_cast<ValidateOptions>(opt), validationTime);
-    tempResult.first.d_ptr->certificate_status = validateResult();
-    return tempResult.first;
-}
-
-class AsyncObjectPrivate
-{ /*Currently unused. Created for abi future proofing*/
-};
-
-AsyncObject::AsyncObject() : QObject(nullptr), d {} { }
-
-AsyncObject::~AsyncObject() = default;
-
-std::pair<SignatureValidationInfo, std::shared_ptr<Poppler::AsyncObject>> FormFieldSignature::validateAsync(ValidateOptions opt, const QDateTime &validationTime) const
-{
-    auto object = std::make_shared<AsyncObject>();
-    FormWidgetSignature *fws = static_cast<FormWidgetSignature *>(m_formData->fm);
-    const time_t validationTimeT = validationTime.isValid() ? validationTime.toSecsSinceEpoch() : -1;
-    SignatureInfo *si = fws->validateSignatureAsync(opt & ValidateVerifyCertificate, opt & ValidateForceRevalidation, validationTimeT, !(opt & ValidateWithoutOCSPRevocationCheck), opt & ValidateUseAIACertFetch,
-                                                    [obj = std::weak_ptr<AsyncObject>(object)]() {
-                                                        if (auto l = obj.lock()) {
-                                                            // We need to roundtrip over the eventloop
-                                                            // to ensure callers have a chance of connecting to AsyncObject::done
-                                                            QMetaObject::invokeMethod(
-                                                                    l.get(),
-                                                                    [innerObj = std::weak_ptr<AsyncObject>(l)]() {
-                                                                        if (auto innerLocked = innerObj.lock()) {
-                                                                            emit innerLocked->done();
-                                                                        }
-                                                                    },
-                                                                    Qt::QueuedConnection);
-                                                        }
-                                                    });
-
-    return { fromInternal(si, fws), object };
-}
-
-SignatureValidationInfo::CertificateStatus FormFieldSignature::validateResult() const
-{
-    return fromInternal(static_cast<FormWidgetSignature *>(m_formData->fm)->validateSignatureResult());
-}
-
 FormFieldSignature::SigningResult FormFieldSignature::sign(const QString &outputFileName, const PDFConverter::NewSignatureData &data) const
 {
     FormWidgetSignature *fws = static_cast<FormWidgetSignature *>(m_formData->fm);
diff --git a/qt6/src/poppler-form.h b/qt6/src/poppler-form.h
index 54abbc25b96ea3a50afa2e637d402147c12c9b38..90f1416306b60881e73643f9c860d9810f425aa2 100644
--- a/qt6/src/poppler-form.h
+++ b/qt6/src/poppler-form.h
@@ -660,8 +660,7 @@ public:
         CertificateRevoked, ///< The certificate was revoked by the issuing certificate authority.
         CertificateExpired, ///< The signing time is outside the validity bounds of this certificate.
         CertificateGenericError, ///< The certificate could not be verified.
-        CertificateNotVerified, ///< The certificate is not yet verified.
-        CertificateVerificationInProgress ///< The certificate is not yet verified but is in progress in the background. See \ref validateAsync \since 24.05
+        CertificateNotVerified ///< The certificate is not yet verified.
     };
 
     /**
@@ -750,30 +749,8 @@ public:
 
 private:
     Q_DECLARE_PRIVATE(SignatureValidationInfo)
-    friend class FormFieldSignature;
-    QSharedPointer<SignatureValidationInfoPrivate> d_ptr;
-};
 
-/**
- * Object help waiting for some async event
- *
- * \since 24.05
- */
-class AsyncObjectPrivate;
-class POPPLER_QT6_EXPORT AsyncObject : public QObject // clazy:exclude=ctor-missing-parent-argument
-{
-    Q_OBJECT
-public:
-    /* Constructor. On purpose not having a QObject parameter
-       It will be returned by shared_ptr or unique_ptr
-    */
-    AsyncObject();
-    ~AsyncObject() override;
-Q_SIGNALS:
-    void done();
-public Q_SLOTS:
-private:
-    std::unique_ptr<AsyncObjectPrivate> d;
+    QSharedPointer<SignatureValidationInfoPrivate> d_ptr;
 };
 
 /**
@@ -827,10 +804,8 @@ public:
       requiring network access, AIAFetch and OCSP,
       can be toggled individually. In case of the GPG backend, if either
       OCSP is used or AIAFetch is used, the other one is also used.
-
-      \deprecated Please rewrite to the async version, that allows the network traffic part of fetching to happen in the background
      */
-    POPPLER_QT6_DEPRECATED SignatureValidationInfo validate(ValidateOptions opt) const;
+    SignatureValidationInfo validate(ValidateOptions opt) const;
 
     /**
       Validate the signature with @p validationTime as validation time.
@@ -842,38 +817,8 @@ public:
       requiring network access, AIAFetch and OCSP,
       can be toggled individually. In case of the GPG backend, if either
       OCSP is used or AIAFetch is used, the other one is also used.
-
-      \deprecated Please rewrite to the async version, that allows the network traffic part of fetching to happen in the background
-     */
-    POPPLER_QT6_DEPRECATED SignatureValidationInfo validate(int opt, const QDateTime &validationTime) const;
-
-    /**
-      Validate the signature with @p validationTime as validation time.
-
-      Reset signature validatation info of scoped instance.
-
-      \since 24.05
-
-      \note depending on the backend, some options are only
-      partially respected. In case of the NSS backend, the two options
-      requiring network access, AIAFetch and OCSP,
-      can be toggled individually. In case of the GPG backend, if either
-      OCSP is used or AIAFetch is used, the other one is also used.
-
-      \note certificate validation will have started when this function return. See \ref validateResult on how to get certifcate validation
-      \note connections to \ref AsyncObject must happen by the caller
-      before returning control to the event loop, else signals is not guaranteed to be delivered
-    */
-    std::pair<SignatureValidationInfo, std::shared_ptr<AsyncObject>> validateAsync(ValidateOptions opt, const QDateTime &validationTime = {}) const;
-
-    /**
-     * \return the updated signature validation info from validateAsync
-     * \note that this function will block if the result is not yet ready.
-     * Wait for the \ref AsyncObject::done signal to avoid this function blocking on an inconvenient time
-     *
-     * \since 24.05
      */
-    SignatureValidationInfo::CertificateStatus validateResult() const;
+    SignatureValidationInfo validate(int opt, const QDateTime &validationTime) const;
 
     /**
      * \since 22.02
diff --git a/qt6/tests/check_signature_basics.cpp b/qt6/tests/check_signature_basics.cpp
index 9135908adf7a243300bf18fc05d149b668d88e22..f93bcbbfc8daf827b7dd8a0d7971f36f94dd7de1 100644
--- a/qt6/tests/check_signature_basics.cpp
+++ b/qt6/tests/check_signature_basics.cpp
@@ -110,8 +110,7 @@ void TestSignatureBasics::testSignerInfo()
     auto signatureFields = doc->getSignatureFields();
     QCOMPARE(signatureFields[0]->getCreateWidget()->getField()->getFullyQualifiedName()->toStr(), std::string { "P2.AnA_Signature0_B_" });
     QCOMPARE(signatureFields[0]->getSignatureType(), ETSI_CAdES_detached);
-    auto siginfo0 = signatureFields[0]->validateSignatureAsync(false, false, -1 /* now */, false, false, {});
-    signatureFields[0]->validateSignatureResult();
+    auto siginfo0 = signatureFields[0]->validateSignature(false, false, -1 /* now */, false, false);
 #ifdef ENABLE_SIGNATURES
     QCOMPARE(siginfo0->getSignerName(), std::string { "Koch, Werner" });
     QCOMPARE(siginfo0->getHashAlgorithm(), HashAlgorithm::Sha256);
@@ -124,8 +123,7 @@ void TestSignatureBasics::testSignerInfo()
 
     QCOMPARE(signatureFields[1]->getCreateWidget()->getField()->getFullyQualifiedName()->toStr(), std::string { "P2.AnA_Signature1_B_" });
     QCOMPARE(signatureFields[1]->getSignatureType(), ETSI_CAdES_detached);
-    auto siginfo1 = signatureFields[1]->validateSignatureAsync(false, false, -1 /* now */, false, false, {});
-    signatureFields[1]->validateSignatureResult();
+    auto siginfo1 = signatureFields[1]->validateSignature(false, false, -1 /* now */, false, false);
 #ifdef ENABLE_SIGNATURES
     QCOMPARE(siginfo1->getSignerName(), std::string { "Koch, Werner" });
     QCOMPARE(siginfo1->getHashAlgorithm(), HashAlgorithm::Sha256);
diff --git a/qt6/tests/poppler-forms.cpp b/qt6/tests/poppler-forms.cpp
index 5961c26727350ca55ab0986c99ce6b781888ec48..912845b216650b20ce9073c87f2c4982b895cdde 100644
--- a/qt6/tests/poppler-forms.cpp
+++ b/qt6/tests/poppler-forms.cpp
@@ -123,8 +123,6 @@ static std::ostream &operator<<(std::ostream &out, Poppler::SignatureValidationI
     case Poppler::SignatureValidationInfo::CertificateNotVerified:
         out << "NotVerifiedYet";
         break;
-    case Poppler::SignatureValidationInfo::CertificateVerificationInProgress:
-        out << "InProgress";
     }
     return out;
 }
diff --git a/utils/pdfsig.cc b/utils/pdfsig.cc
index 7c61e1f3351b8aea0bfde71a940d822f829c54d9..8626a9e1f4e6a5d77a92ce3b8e62f5ac83ec78e9 100644
--- a/utils/pdfsig.cc
+++ b/utils/pdfsig.cc
@@ -574,16 +574,6 @@ int main(int argc, char *argv[])
         printf("File '%s' does not contain any signatures\n", fileName->c_str());
         return 2;
     }
-    std::unordered_map<int, SignatureInfo *> signatureInfos;
-    for (unsigned int i = 0; i < sigCount; i++) {
-        // Let's start the signature check first for signatures.
-        // we can always wait for completion later
-        FormFieldSignature *ffs = signatures.at(i);
-        if (ffs->getSignatureType() == unsigned_signature_field) {
-            continue;
-        }
-        signatureInfos[i] = ffs->validateSignatureAsync(!dontVerifyCert, false, -1 /* now */, !noOCSPRevocationCheck, useAIACertFetch, {});
-    }
 
     for (unsigned int i = 0; i < sigCount; i++) {
         FormFieldSignature *ffs = signatures.at(i);
@@ -599,8 +589,7 @@ int main(int argc, char *argv[])
             continue;
         }
 
-        const SignatureInfo *sig_info = signatureInfos[i];
-        CertificateValidationStatus certificateStatus = ffs->validateSignatureResult();
+        const SignatureInfo *sig_info = ffs->validateSignature(!dontVerifyCert, false, -1 /* now */, !noOCSPRevocationCheck, useAIACertFetch);
         printf("  - Signer Certificate Common Name: %s\n", sig_info->getSignerName().c_str());
         printf("  - Signer full Distinguished Name: %s\n", sig_info->getSubjectDN().c_str());
         printf("  - Signing Time: %s\n", time_str = getReadableTime(sig_info->getSigningTime()));
@@ -660,7 +649,7 @@ int main(int argc, char *argv[])
         if (sig_info->getSignatureValStatus() != SIGNATURE_VALID || dontVerifyCert) {
             continue;
         }
-        printf("  - Certificate Validation: %s\n", getReadableCertState(certificateStatus));
+        printf("  - Certificate Validation: %s\n", getReadableCertState(sig_info->getCertificateValStatus()));
     }
 
     return 0;
